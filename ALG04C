#include <iostream>
#include <set>
#include <iterator>

using namespace std;


set<string> showlcs(string dna1, string dna2, int d1, int d2,int table[301][301])
{
    ///to store possible string
    set<string> s;

    if (d1 == 0 || d2 == 0)
    {
        s.insert("");
        return s;
    }

    if (dna1[d1 - 1] == dna2[d2 - 1])
    {
        set<string> tmp = showlcs(dna1, dna2, d1 - 1, d2 - 1,table);
        for (string str : tmp)
        {
            s.insert(str + dna1[d1 - 1]);
        }
    }
    else
    {
        if (table[d1 - 1][d2] >= table[d1][d2 - 1])//if string can be from top
        {
            s = showlcs(dna1, dna2, d1 - 1, d2,table);
        }

        if (table[d1][d2 - 1] >= table[d1 - 1][d2])//if string can be from left
        {
            set<string> tmp = showlcs(dna1, dna2, d1, d2 - 1,table);
            s.insert(tmp.begin(), tmp.end());
        }
    }
    return s;
}


int main()
{
    string dna1,dna2;

    while(cin >> dna1)
    {
        cin >> dna2;

        int d1=dna1.length(),d2=dna2.length();

        int table[301][301] = {0};

        for(int i=0;i<=d1;i++)
        {
            for(int j=0;j<=d2;j++)
            {
                if(i==0||j==0)
                {
                    table[i][j] = 0;
                }
                else if(dna1[i-1] == dna2[j-1])
                {
                    table[i][j] = table[i-1][j-1] + 1;
                }
                else
                {
                     table[i][j] = max( table[i][j-1], table[i-1][j] );
                }
            }
        }
        if(table[d1][d2] == 0)
        {
            cout << "No common sequence." << endl;
        }
        else
        {
            set<string> s = showlcs(dna1,dna2,d1,d2,table);
            for (string str : s)
            {
                cout << str << endl;
            }

        }
      cout << endl;

    }

    return 0;
}


/*
atgc
tga

atgc
gctg


*/
